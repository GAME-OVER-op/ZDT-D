<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="/index.70db41ce.css" rel="stylesheet" />
  <script type="module" src="/index.281e69f2.js"></script>
  <style>
    /* Стили для видео на заднем фоне */
    body {
      position: relative;
      margin: 0;
      padding: 0;
      overflow-x: hidden; /* Убирает прокрутку по оси X */
    }
    #backgroundVideo {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      z-index: -2; /* Размещаем под содержимым сайта */
    }
    #overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6); /* Полупрозрачный серый слой */
      z-index: -1; /* Размещаем над видео, но под содержимым */
    }
    /* Стиль для переключателей */
    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 26px;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 34px;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      border-radius: 50%;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: 0.4s;
    }
    input:checked + .slider {
      background-color: #2196F3;
    }
    input:checked + .slider:before {
      transform: translateX(24px);
    }
    /* Дополнительные стили для темного режима */
    .dark .slider {
      background-color: #444;
    }
    .dark input:checked + .slider {
      background-color: #4caf50;
    }
  </style>
</head>
<body class="bg-gray-900 flex flex-col min-h-screen text-white">
  <!-- Видео на заднем фоне -->
  <video id="backgroundVideo" autoplay muted loop>
    <source src="/auth/background.mp4" type="video/mp4">
    Ваш браузер не поддерживает видео.
  </video>
  <div id="overlay"></div>
  
  <!-- Основной контент -->
  <header class="backdrop-blur-md ml-3 mt-3 p-4 sticky top-0 z-50">
    <h1 class="font-bold text-2xl">Настройки Zapret & DPI Tunnel and DNS</h1>
  </header>
  <main class="flex-grow pt-1">
    <div class="p-6">
      <div class="bg-gray-800 flex justify-between mb-4 p-4 rounded-lg">
        <h2 class="font-semibold text-lg">Информация, рекомендуется к прочтению.</h2>
        <button id="instructionButton" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white" onclick="window.location.href='instr/index.html'">Читать</button>
      </div>

      <div class="bg-gray-800 mb-4 p-4 rounded-lg">
        <h2 class="font-semibold mb-4 text-lg">Настройки</h2>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Конфигурация DPI Tunnel 0</p>
          <button id="editDpiTunnel0Button" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white" onclick="loadFile('/data/adb/modules/ZDT-D/working_folder/config0')">Редактировать</button>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Конфигурация DPI Tunnel 1</p>
          <button id="editDpiTunnel1Button" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white" onclick="loadFile('/data/adb/modules/ZDT-D/working_folder/config1')">Редактировать</button>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Список приложений zapret</p>
          <button id="editUidZapretButton" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white" onclick="loadFile('/data/adb/modules/ZDT-D/working_folder/zapret_uid')">Редактировать</button>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Список приложений DPI Tunnel 0</p>
          <button id="editUidDpiTunnel0Button" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white" onclick="loadFile('/data/adb/modules/ZDT-D/working_folder/uid_program0')">Редактировать</button>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Список приложений DPI Tunnel 1</p>
          <button id="editUidDpiTunnel1Button" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white" onclick="loadFile('/data/adb/modules/ZDT-D/working_folder/uid_program1')">Редактировать</button>
        </div>
      </div>
      <div class="bg-gray-800 mb-4 p-4 rounded-lg">
        <h2 class="font-semibold mb-4 text-lg">Дополнительные настройки</h2>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Выкл/Вкл сервис</p>
          <label for="offonserviceToggle" class="switch">
            <input id="offonserviceToggle" type="checkbox" class="toggle" onchange="handleToggle(this.checked)" checked />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Запустить vpn vless (в разработке)</p>
          <label for="vpn_serviceToggle" class="switch">
            <input id="vpn_serviceToggle" type="checkbox" class="toggle" onchange="handlevpnToggle(this.checked)" checked />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Использовать новую конфигурацию zapret</p>
          <label for="zapretconfigToggle" class="switch">
            <input id="zapretconfigToggle" type="checkbox" class="toggle" onchange="saveSettings()" />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Выкл/Вкл уведомления</p>
          <label for="notificationToggle" class="switch">
            <input id="notificationToggle" type="checkbox" class="toggle" onchange="saveSettings()" />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Альтернативный способ подключения</p>
          <label for="alternativelToggle" class="switch">
            <input id="alternativelToggle" type="checkbox" class="toggle" onchange="saveSettings()" />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Включить DNS отAdGuard, Cloudflare и Google.</p>
          <label for="dnsToggle" class="switch">
            <input id="dnsToggle" type="checkbox" class="toggle" onchange="handleDnsToggle(this.checked)" />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Применить zapret по всей системе</p>
          <label for="fullSystemToggle" class="switch">
            <input id="fullSystemToggle" type="checkbox" class="toggle" onchange="saveSettings()" />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Включить DPI Tunnel 0</p>
          <label for="dpiTunnel0Toggle" class="switch">
            <input id="dpiTunnel0Toggle" type="checkbox" class="toggle" onchange="saveSettings()" />
            <span class="slider"></span>
          </label>
        </div>
        <div class="flex items-center justify-between mb-3">
          <p class="text-sm text-white">Включить DPI Tunnel 1</p>
          <label for="dpiTunnel1Toggle" class="switch">
            <input id="dpiTunnel1Toggle" type="checkbox" class="toggle" onchange="saveSettings()" />
            <span class="slider"></span>
          </label>
        </div>
      </div>
    </div>
  </main>
  <div id="fileModal" class="bg-gray-900 bg-opacity-75 fixed flex hidden inset-0 items-center justify-center z-50">
    <div class="bg-gray-800 max-w-md p-6 rounded-lg w-11/12">
      <h3 class="font-semibold mb-2 text-lg">Редактировать файл</h3>
      <textarea id="fileInput" class="bg-gray-700 border-none outline-none p-2 resize-none rounded-md shadow-none text-sm text-white w-full" rows="16"></textarea>
      <div class="flex justify-end mt-4">
        <button id="cancelButton" class="bg-gray-600 hover:bg-gray-500 mr-2 px-4 py-1 rounded-md text-sm text-white" onclick="closeFileModal()">Отмена</button>
        <button id="saveFileButton" class="bg-blue-600 hover:bg-blue-500 px-4 py-1 rounded-md text-sm text-white" onclick="saveFile()">Сохранить</button>
      </div>
    </div>
  </div>
  <footer class="mb-2 mt-auto py-3 text-center text-gray-600 text-xs">
    <p>Разработано Ggover</p>
    <!-- Дополнительные кнопки -->
    <div id="testOptions" class="d-none mt-2">
      <button id="changePasswordButton" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white mb-2" onclick="window.open('/auth/change_password.php', '_blank')">
        Сменить пароль
      </button>
      <button id="manageLoginButton" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white mb-2" onclick="window.open('/auth/manage_login.php', '_blank')">
        Включить/выключить авторизацию
      </button>
      <button id="logoutButton" class="bg-gray-700 hover:bg-gray-600 px-10 py-1 rounded-md text-sm text-white" onclick="window.location.href = '/auth/logout.php'">
        Выйти из учётной записи
      </button>
    </div>
  </footer>

  <script>
    // Логика для переключения отображения опций
    document.getElementById('testButton').addEventListener('click', function () {
      const options = document.getElementById('testOptions');
      options.classList.toggle('d-none');
    });
  </script>

  <script>
    function handleToggle(state) {
      toggleService(state);
      saveSettings();
    }

    function handlevpnToggle(state) {
      togglevpnService(state);
      saveSettings();
    }

    function handleDnsToggle(state) {
      toggleDnsService(state);
      saveSettings();
    }

    function toggleDnsService(state) {
      console.log('toggleService вызван со значением:', state);
      fetch('toggle_dns_service.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ state: state })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          console.log("Команда успешно выполнена:", data.message);
        } else {
          console.error("Ошибка:", data.message);
        }
      })
      .catch(error => console.error("Ошибка при запросе:", error));
    }

    function togglevpnService(state) {
      console.log('toggleService вызван со значением:', state);
      fetch('toggle_vpn_service.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ state: state })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          console.log("Команда успешно выполнена:", data.message);
        } else {
          console.error("Ошибка:", data.message);
        }
      })
      .catch(error => console.error("Ошибка при запросе:", error));
    }

    function toggleService(state) {
      console.log('toggleService вызван со значением:', state);
      fetch('toggle_service.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ state: state })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          console.log("Команда успешно выполнена:", data.message);
        } else {
          console.error("Ошибка:", data.message);
        }
      })
      .catch(error => console.error("Ошибка при запросе:", error));
    }

    function saveSettings() {
      console.log('saveSettings вызван');
      fetch('save_settings.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ settingsSaved: true })
      })
      .then(response => response.json())
      .then(data => {
        console.log("Настройки сохранены:", data);
      })
      .catch(error => console.error("Ошибка при сохранении настроек:", error));
    }

    let currentFile = '';

    function loadIframe(url) {
      let iframeContainer = document.getElementById('iframe-container');
      if (!iframeContainer) {
        iframeContainer = document.createElement('div');
        iframeContainer.id = 'iframe-container';
        iframeContainer.style.position = 'fixed';
        iframeContainer.style.top = '50%';
        iframeContainer.style.left = '50%';
        iframeContainer.style.transform = 'translate(-50%, -50%)';
        iframeContainer.style.zIndex = '1000';
        iframeContainer.style.background = '#fff';
        iframeContainer.style.boxShadow = '0px 0px 10px rgba(0,0,0,0.5)';
        iframeContainer.style.border = '1px solid #ddd';
        iframeContainer.style.padding = '20px';
        iframeContainer.style.width = '80%';
        iframeContainer.style.height = '80%';

        const closeButton = document.createElement('button');
        closeButton.innerText = 'Закрыть';
        closeButton.style.position = 'absolute';
        closeButton.style.top = '10px';
        closeButton.style.right = '10px';
        closeButton.style.zIndex = '1001';
        closeButton.addEventListener('click', () => {
          document.body.removeChild(iframeContainer);
        });
        iframeContainer.appendChild(closeButton);

        document.body.appendChild(iframeContainer);
      }
      iframeContainer.innerHTML = `<iframe src="${url}" style="width: 100%; height: 100%; border: none;"></iframe>`;
    }

    function showInstructions() {
      document.getElementById('instructionModal').classList.remove('hidden');
    }

    function closeInstructions() {
      document.getElementById('instructionModal').classList.add('hidden');
    }

    function loadFile(filepath) {
      currentFile = filepath;
      fetch('load_file.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: `filepath=${encodeURIComponent(filepath)}`
      })
      .then(response => response.text())
      .then(data => {
        document.getElementById('fileInput').value = data;
        document.getElementById('fileModal').classList.remove('hidden');
      });
    }

    function closeFileModal() {
      document.getElementById('fileModal').classList.add('hidden');
    }

    function saveFile() {
      const content = document.getElementById('fileInput').value;
      fetch('save_file.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: `filepath=${encodeURIComponent(currentFile)}&content=${encodeURIComponent(content)}`
      }).then(() => closeFileModal());
    }

    async function fetchSettings(filePath) {
      const response = await fetch('load_file.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: `filepath=${encodeURIComponent(filePath)}`
      });
      const data = await response.text();
      return parseSettings(data);
    }

    function parseSettings(settingsStr) {
      const settings = {};
      settingsStr.split('\n').forEach(line => {
        const [key, value] = line.split('=');
        if (key && value) settings[key.trim()] = value.trim() === '1';
      });
      return settings;
    }

    async function loadSettings() {
      const settings = await fetchSettings('/data/adb/modules/ZDT-D/working_folder/params');
      document.getElementById('alternativelToggle').checked = settings.alternativel || false;
      document.getElementById('dnsToggle').checked = settings.dns || false;
      document.getElementById('fullSystemToggle').checked = settings.full_system || false;
      document.getElementById('dpiTunnel0Toggle').checked = settings.dpi_tunnel_0 || false;
      document.getElementById('dpiTunnel1Toggle').checked = settings.dpi_tunnel_1 || false;
      document.getElementById('offonserviceToggle').checked = settings.offonservice || false;
      document.getElementById('notificationToggle').checked = settings.notification || false;
      document.getElementById('vpn_serviceToggle').checked = settings.vpn_service || false;
      document.getElementById('zapretconfigToggle').checked = settings.zapretconfig || false;
    }

    async function saveSettings() {
      const alternativel = document.getElementById('alternativelToggle').checked ? 1 : 0;
      const dnsEnabled = document.getElementById('dnsToggle').checked ? 1 : 0;
      const fullSystem = document.getElementById('fullSystemToggle').checked ? 1 : 0;
      const dpiTunnel0 = document.getElementById('dpiTunnel0Toggle').checked ? 1 : 0;
      const dpiTunnel1 = document.getElementById('dpiTunnel1Toggle').checked ? 1 : 0;
      const offonservice = document.getElementById('offonserviceToggle').checked ? 1 : 0;
      const notification = document.getElementById('notificationToggle').checked ? 1 : 0;
      const vpn_service = document.getElementById('vpn_serviceToggle').checked ? 1 : 0;
      const zapretconfig = document.getElementById('zapretconfigToggle').checked ? 1 : 0;

      const settings = `dns=${dnsEnabled}\nfull_system=${fullSystem}\ndpi_tunnel_0=${dpiTunnel0}\ndpi_tunnel_1=${dpiTunnel1}\nalternativel=${alternativel}\nnotification=${notification}\nvpn_service=${vpn_service}\nzapretconfig=${zapretconfig}\noffonservice=${offonservice}`;
      await fetch('save_file.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: `filepath=/data/adb/modules/ZDT-D/working_folder/params&content=${encodeURIComponent(settings)}`
      });
    }

    window.onload = loadSettings;
  </script>
</body>
</html>
